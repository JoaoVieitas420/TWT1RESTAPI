const request = require('request-promise');

const { spawn } = require('child_process');
const { join } = require('path');
const fs = require('fs');
const systemStats = require('./system-stats');

const addAgent = async (port, master, worker, dir) => {
    const add = await _ipLookup();
    await addAgentWithIpAdd(add, port, master, worker, dir);
}

const addAgentWithIpAdd = async (add, port, master, worker, dir) => {
    let agents = require('fs').readFileSync(join(__dirname, '/agents.json'), 'utf8');
    agents = JSON.parse(agents);
    if (master) {
        if (existingAgent = agents.masters.find(master => master.ip === add)) {
            existingAgent.port = port;
            // existingAgent.dir = dir;
            if (!worker) {
                let index = agents.workers.findIndex(worker => worker.ip === add)
                if (index > -1) agents.workers.splice(index, 1);
            }
        }
        else {
            agents.masters.push({
                port,
                ip: add,
                // dir
            });
        }

    }
    if (worker) {
        if (existingAgent = agents.workers.find(worker => worker.ip === add)) {
            existingAgent.port = port;
            existingAgent.dir = dir;
        }
        else {
            agents.workers.push({
                port,
                ip: add,
                dir
            })
        }

    }
    await _updateConfigInAgents(agents);
    // require('fs').writeFileSync('./agents.json', JSON.stringify(agents), { encoding: 'utf8' });

}



const statsUpdate = async (ip, stats) => {
    let agents = JSON.parse(require('fs').readFileSync(join(__dirname, '/agents.json'), 'utf8'));
    let masterIndex = agents.masters.findIndex(agent => agent.ip == ip);

    if (masterIndex > -1) {
        agents.masters[masterIndex] = { ...agents.masters[masterIndex], ...stats };
    }

    let workerIndex = agents.workers.findIndex(agent => agent.ip == ip);
    if (workerIndex > -1) {
        agents.workers[workerIndex] = { ...agents.workers[workerIndex], ...stats };
    }

    let masterIp = await _ipLookup();

    let index = agents.masters.findIndex(agent => agent.ip == masterIp);

    if (index > -1) {
        agents.masters[masterIndex] = { ...agents.masters[masterIndex], ...await systemStats() };
    }


    console.log({ agents });
    await _updateConfigInAgents(agents);
}

const joinCluster = async (addr, port, dir, master, worker) => {
    let ip = await _ipLookup();
    await request({
        url: `http://${addr}/add-agent`,
        body: { ip, port, master, worker, dir },
        method: 'POST',
        json: true
    });
}


const heartbeatCheck = async () => {

    const out = fs.openSync(join(__dirname, './out.log'), 'a'),
        err = fs.openSync(join(__dirname, './out.log'), 'a');

    let child = spawn('node', [join(__dirname, './health-checker.js')], {
        detached: true,
        stdio: ['ignore', out, err]
    });

    // child.stderr.on('data', (data) => {
    //     console.log('Error while listening to port', cmd.port, data.toString());
    // });
};

module.exports = {
    addAgent,
    addAgentWithIpAdd,
    joinCluster,
    statsUpdate,
    heartbeatCheck
}


const _getAllAgents = (agents) => {
    return agents.masters.slice().concat(agents.workers);
}

const _ipLookup = () => {
    return new Promise((resolve, reject) => {
        require('dns').lookup(require('os').hostname(), function async(err, ip, fam) {
            if (err) {
                return reject(err);
            }
            return resolve(ip);
        });
    })
}



const _updateConfigInAgents = (agents) => {
    return Promise.all(_getAllAgents(agents).map(async agent => {
        try {
            await request({
                url: `http://${agent.ip}:${agent.port || 2222}/agents`,
                body: { agents },
                method: 'POST',
                // timeout: 1000,
                json: true
            });
        }
        catch (err) {
            console.log(err);
        }
    }));
}




const _createNewMaster = () => {

}



var os = require('os');

const RESOLUTION = 1000; // 1s CPU resolution 

function cpusInfo() {
    return os.cpus().map(function (cpu) {
        var t = cpu.times;

        return {
            total: t.user + t.nice + t.sys + t.irq + t.idle,
            idle: t.idle
        };
    });
}

function cpuInfo() {
    return cpusInfo().reduce(function (previous, cpu) {
        return {
            total: previous.total += cpu.total,
            idle: previous.idle += cpu.idle
        };
    }, {
            total: 0,
            idle: 0
        });
}

function cpusUsage(callback) {
    return new Promise(resolve => {
        setTimeout(function (begin) {
            resolve(cpusInfo().map(function (cpu, index) {
                var cpuBegin = begin[index];

                return 1 - (cpu.idle - cpuBegin.idle) / (cpu.total - cpuBegin.total);
            }));
        }, RESOLUTION, cpusInfo());
    });

}

function cpuUsage() {
    return new Promise(resolve => {
        setTimeout(function (begin) {
            var end = cpuInfo();
            resolve(1 - (end.idle - begin.idle) / (end.total - begin.total));
        }, RESOLUTION, cpuInfo());
    })

}

module.exports =  async () => ({
    avgCpuUsage: await cpuUsage(),
    // coreUsage: await cpusUsage(),
    totalCpus: os.cpus().length,
    totalMemory: os.totalmem() / 1024 / 1024,
    freeMemory: os.freemem() / 1024 / 1024
});

